<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>docker on 丸子有记</title><link>/tags/docker/</link><description>Recent content in docker on 丸子有记</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>wzdushu@gmail.com (wanzi)</managingEditor><webMaster>wzdushu@gmail.com (wanzi)</webMaster><copyright>丸子有记</copyright><lastBuildDate>Thu, 13 Apr 2023 18:22:42 +0800</lastBuildDate><atom:link href="/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>Kind builds a lightweight kubernetes cluster</title><link>/post/kubernetes-kind-build-clusters/</link><pubDate>Thu, 13 Apr 2023 18:22:42 +0800</pubDate><author>wzdushu@gmail.com (wanzi)</author><guid>/post/kubernetes-kind-build-clusters/</guid><description>I was reviewing Golang recently and wrote a web application. After running it locally, I wanted to test it in a k8s cluster. Due to the machine configuration, it was still a bit difficult to build a complete k8s cluster. I remember that a friend said that k8s can also be run in docker, so I tried it. Today&amp;rsquo;s protagonist is kind, so what is kind? What can kind be</description></item><item><title>Jenkins Agent integrates docker and kubectl tools</title><link>/post/cicd-jenkins-agent-docker-kubectl-helm/</link><pubDate>Wed, 22 Mar 2023 18:22:42 +0800</pubDate><author>wzdushu@gmail.com (wanzi)</author><guid>/post/cicd-jenkins-agent-docker-kubectl-helm/</guid><description>When we build Jenkins, the official jenkins-agent does not have the tools we use, such as helm, kubectl, curl, argocd, etc., so we need to integrate them. Note that the official image names have changed: jenkins/agent image, originally named jenkins/slave, renamed to jenkins/agent from 4.3-2 jenkins/inbound-agent image: originally named jenkins/jnlp-slave, renamed to jenkins/inbound-agent from 4.3-2 Dockerfile Copy 1 2 3 4 5 6 7 8 9 10 FROM jenkins/inbound-agent:4.11-1-alpine-jdk11 USER</description></item><item><title>Dockerfile multi-stage build</title><link>/post/docker-dockerfile-multi-stage/</link><pubDate>Mon, 02 Jul 2018 16:22:42 +0800</pubDate><author>wzdushu@gmail.com (wanzi)</author><guid>/post/docker-dockerfile-multi-stage/</guid><description>Understanding of Docker multi-stage build: Building an image requires a base image, and subsequent operations will be built based on the base image There is a layered concept in the docker image file. Each time the RUN instruction is executed, the image will have one more layer, so the image size can be reduced by reducing the layers When there are multiple froms, only the image of the last from</description></item><item><title>Dockerfile syntax details</title><link>/post/docker-dockerfile-details/</link><pubDate>Thu, 21 Jun 2018 16:22:42 +0800</pubDate><author>wzdushu@gmail.com (wanzi)</author><guid>/post/docker-dockerfile-details/</guid><description>FROM Specify the base image used to build the image. FROM must be the first instruction in the non-comment line in the Dockerfile. If there is no specified image locally, it will automatically pull the image from the Docker public library. Example: Copy 1 FROM ubuntu:14.04 #Inherit ubuntu:14.04 MAINTAINER Specify creator information Copy 1 MAINTAINER wanzi &amp;#34;iwz2099@163.com&amp;#34; ENV Set environment variables, which will be used by subsequent RUN instructions and</description></item><item><title>Docker Basic Commands</title><link>/post/docker-commands-base/</link><pubDate>Wed, 20 Jun 2018 16:22:42 +0800</pubDate><author>wzdushu@gmail.com (wanzi)</author><guid>/post/docker-commands-base/</guid><description>Common commands Copy 1 2 3 4 5 6 7 8 docker info #View local docker information docker search openresty #Search for remote image warehouse docker images #View the current system image warehouse image docker ps #View the currently running container docker pull centos #Get the remote image, the default tag is not specified, which is the latest docker container run -p 8000:80 --rm -t -i centos:latest /bin/bash #-p maps</description></item></channel></rss>