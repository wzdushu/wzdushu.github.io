<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>丸子有记</title><link>/</link><description>Recent content on 丸子有记</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>wzdushu@gmail.com (wanzi)</managingEditor><webMaster>wzdushu@gmail.com (wanzi)</webMaster><copyright>丸子有记</copyright><lastBuildDate>Wed, 24 Feb 2021 17:22:42 +0800</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>笔记</title><link>/notes/</link><pubDate>Sun, 26 Nov 2023 15:00:52 +0800</pubDate><author>wzdushu@gmail.com (wanzi)</author><guid>/notes/</guid><description>&lt;ul>
&lt;li>&lt;strong>&lt;a href="https://wnote.com/notes/golang/">Go语言学习手册&lt;/a>&lt;/strong> Golang新手学习手册, 涵盖Go常用数据类型、基本语法、函数、封装、继承、多态、并发编程、错误处理等等。&lt;/li>
&lt;li>&lt;strong>&lt;a href="https://wnote.com/notes/devops/">DevOps&lt;/a>&lt;/strong> 面向运维开发、运维，涵盖Git、Jenkins、Gitlab、Github、Gerrit、Argo、ArgoCD、Kubernetes Operator、ChatBot等&lt;/li>
&lt;li>&lt;strong>&lt;a href="https://wnote.com/notes/kubernetes/">Kubernetes&lt;/a>&lt;/strong> 面向容器运维，主要讲解k8s部署、k8s基础、k8s常用控制器和资源清单、配置管理、RBAC、监控告警、Istio、Containerd等&lt;/li>
&lt;/ul></description></item><item><title>about</title><link>/about/</link><pubDate>Mon, 20 Aug 2018 21:38:52 +0800</pubDate><author>wzdushu@gmail.com (wanzi)</author><guid>/about/</guid><description>&lt;h2 id="关于我">关于我&lt;/h2>
&lt;p>我的网名&amp;quot;丸子说&amp;quot;, 目前在一家人工智能公司负责运维架构相关工作，业余时间喜欢看看书、写写博客, 喜欢以博会友。&lt;/p>
&lt;p>关于博客任何问题可以Email给我，dushu100#qq.com(用@替换#)&lt;/p>
&lt;h2 id="关于本站">关于本站&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>站点域名&lt;/strong> &amp;ndash; &lt;code>wnote.com&lt;/code> ，w寓意“丸子”，因此wnote可以理解为丸子有记，有忆可记。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>站点评论&lt;/strong> &amp;ndash; 采用giscus，GitHub Discussions驱动的评论系统，类似于gitment、gittalk、utteranc。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>站点证书&lt;/strong> &amp;ndash; ACME申请的zerossl家免费SSL证书。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="丸子日常">丸子日常&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>主力操作系统&lt;/strong> —— &lt;strong>Mac&amp;amp;&amp;amp;Linux&lt;/strong> , 喜欢Mac随时随地敲打命令、写代码感觉。&lt;/li>
&lt;li>&lt;strong>编辑器&lt;/strong> —— &lt;strong>Vim&amp;amp;&amp;amp;VsCode&amp;amp;&amp;amp;Goland&lt;/strong> ，vim是Linux文本编辑标配，VsCode我主要进行前端和Python脚本调试，Goland开发后端项目&lt;/li>
&lt;li>&lt;strong>编程语言&lt;/strong> —— 熟悉程度由高到低 &lt;code>shell&lt;/code>, &lt;code>Python&lt;/code>, &lt;code>Golang&lt;/code>, &lt;code>Html/Css/Js&lt;/code> 。&lt;/li>
&lt;li>&lt;strong>键盘&lt;/strong> —— Cherry G80 红轴&lt;/li>
&lt;/ul>
&lt;h2 id="本站建站目的">本站建站目的&lt;/h2>
&lt;p>一、技术总结。随着时间的推移，有些技术很快就忘了，建立独立站点写博客，不仅仅方便自己日后查找、驱动自己写总结，而且让自己更认真对待这件事。&lt;/p>
&lt;p>二、分享经验和思路。毕业后就来了北京，一路走来，中间也经历了不少挫折，但是通过自我学习成长过程，很快融入了互联网的浪潮中，因此，分享些有价值的东西对行业和社会也是一种回馈。&lt;/p>
&lt;p>三、交友。在这个快速发展的年代，我觉得以博会友也是一件有意思的事儿。&lt;/p></description></item><item><title>自动化编排工具Terraform介绍</title><link>/post/devops-terraform-about/</link><pubDate>Wed, 24 Feb 2021 17:22:42 +0800</pubDate><author>wzdushu@gmail.com (wanzi)</author><guid>/post/devops-terraform-about/</guid><description>&lt;h2 id="terraform是什么">Terraform是什么？：&lt;/h2>
&lt;p>Terraform是由HashiCorp公司在2014年左右推出的开源资源编排工具, 目前几乎所有的主流云服务商都支持Terraform，包括阿里云、腾讯云、华为云、AWS、Azure、百度云等等。目前很多公司都基于terraform构建自己的基础架构。&lt;/p>
&lt;blockquote>
&lt;p>诞生背景：
传统运维模式下，业务上线需经过设备采购，机器上架，网络环境搭建和系统安装等准备阶段。随着云计算的兴起，各大公有云厂商均提供了非常友好的交互界面，用户借助一个浏览器就可以按需采购各种云资源，快速实现业务架构的搭建。然而，随着业务架构的不断扩展，云资源采购的规模和种类也在持续增加。当用户需要快速采购大量不同类型的云资源时，云管理页面间大量的交互操作反而降低了云资源的采购效率。在阿里云控制台上初始化一个经典的VPC网络架构，从创建VPC、交换机VSwitch到创建Nat网关、弹性IP再到配置路由等工作，大概要花费20分钟甚至更久。同时，工作成果的不可复制性，带来的是跨Region和跨云平台场景下的重复劳动。&lt;/p>
&lt;/blockquote>
&lt;p>事实上，对业务运维人员而言，只关心对资源的配置，无需关心这些资源的创建步骤。如同喝咖啡，只需要告诉服务员喝什么，加不加冰等就够了。如果有一份完整的云资源采购清单，这张清单清楚的记录了所需要购买的云资源的种类，规格，数量以及各云资源之间的关系，然后一键完成购买，并且当业务需求发生变化时，只需要变更清单就可以实现对云资源的快速变更，那么效率就会提高很多。在云计算中这被称作资源编排，目前很多云平台也提供了资源编排的能力，如阿里云的ROS，AWS的CloudFormation等。&lt;/p>
&lt;blockquote>
&lt;p>将云资源、服务或者操作步骤以代码的形式定义在模板中，借助编排引擎，实现资源的自动化管理，这就是基础设施即代码（Infrastructure as Code，简称IaC），也是资源编排最高效的实现模式。然而，多种云编排服务带来的是高昂的学习成本、低效的代码复用率和复杂的多云协同工作流程。每一种服务仅限于管理自家的单一云平台上，无法满足对多个云平台，多种层级（如IaaS，PaaS）资源的统一管理。如何解决如上问题，是否可以使用统一的编排工具，共用一套语法实现对包括阿里云在内的多云的统一管理呢？所以这个时候就诞生Terraform，来解决这些问题。&lt;/p>
&lt;/blockquote>
&lt;h2 id="terrafrom功能和作用">Terrafrom功能和作用：&lt;/h2>
&lt;h3 id="功能点">功能点&lt;/h3>
&lt;ul>
&lt;li>IaC：infrastructure as code，用代码管理基础设施&lt;/li>
&lt;li>执行计划：显示terraform apply时执行的操作&lt;/li>
&lt;li>资源图：构建所有资源的图形&lt;/li>
&lt;li>变更自动化：基于执行计划和资源图，可以清晰知道要变更的内容和顺序
总结：terraform用于各类基础设施资源初始化，支持多种云平台，支持第三方服务对接&lt;/li>
&lt;/ul>
&lt;h3 id="作用">作用&lt;/h3>
&lt;ul>
&lt;li>使用不同provider的API，包装抽象成Terraform的标准代码结构&lt;/li>
&lt;li>用户不需要了解每个云计算厂商的API细节，降低了部署难度&lt;/li>
&lt;/ul>
&lt;h2 id="terraform架构">Terraform架构&lt;/h2>
&lt;p>Terraform本身是基于插件的架构，可扩展性很强，可以方便程序员对Terraform进行扩展。Terraform从逻辑上可以分为两层，核心层（Terraform Core）和插件层（Terraform Provider）。&lt;/p>
&lt;h3 id="核心层">核心层&lt;/h3>
&lt;p>核心层其实就是terraform的命令行工具，它是用go语言开发的，它负责：&lt;/p>
&lt;ol>
&lt;li>读取.tf配置，进行变量替换&lt;/li>
&lt;li>资源状态文件管理&lt;/li>
&lt;li>分析资源关系，绘制图谱&lt;/li>
&lt;li>依赖关系图谱，创建资源
根据依赖关系，创建资源；对于没有依赖关系的资源，会并行进行创建(缺省10个并行进程），这也是Terraform能够高效快速管理云资源的原因。&lt;/li>
&lt;li>用RPC调用插件层&lt;/li>
&lt;/ol>
&lt;h3 id="插件层">插件层&lt;/h3>
&lt;p>插件层也是由go语言开发的，Terraform有超过250个不同的插件，它们负责：&lt;/p>
&lt;ul>
&lt;li>接受核心层的RPC调用&lt;/li>
&lt;li>具体提供某一项服务的执行&lt;/li>
&lt;/ul>
&lt;p>插件层又有两种：&lt;/p>
&lt;h4 id="provider">Provider&lt;/h4>
&lt;p>Provider，负责与外界API的集成，比如阿里云Provider就提供了在阿里云创建、修改、删除云资源的功能。这个插件负责和阿里云云API的接口交互，并提供一层抽象，这样程序员可以在不了解API细节的情况下，通过terraform来编排资源。它负责：&lt;/p>
&lt;ul>
&lt;li>始化以及外界API通信&lt;/li>
&lt;li>外界API的认证&lt;/li>
&lt;li>定义云资源与外界服务的关系&lt;/li>
&lt;/ul>
&lt;p>比如常见provider:&lt;/p>
&lt;div class="highlight-container">
&lt;button class="copy-code-btn outline">Copy&lt;/button>
&lt;div class="highlight">&lt;div style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-1">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-1">1&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-2">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-2">2&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-3">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-3">3&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-4">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-4">4&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-5">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-5">5&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-6">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-6">6&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-7">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-7">7&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-8">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-8">8&lt;/a>
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-9">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-9">9&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>阿里云： https://github.com/aliyun/terraform-provider-alicloud
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>百度云：https://github.com/baidubce/terraform-provider-baiducloud
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>腾讯云：https://github.com/tencentcloudstack/terraform-provider-tencentcloud
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>华为云：https://github.com/huaweicloud/terraform-provider-huaweicloud
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ucloud：https://github.com/ucloud/terraform-provider-ucloud
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>qingcloud：https://github.com/yunify/terraform-provider-qingcloud
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>AWS：https://github.com/hashicorp/terraform-provider-aws
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Azure：https://github.com/terraform-providers/terraform-provider-azurerm
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>GoogleCloud：https://github.com/hashicorp/terraform-provider-google&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;h4 id="provisioner">Provisioner&lt;/h4>
&lt;p>Provisioner，负责在资源创建或者删除完成后，执行一些脚本。比如Puppet Provisioner就可以在云虚拟机资源创建完成后，在该资源上下载、安装、配置Puppet agent。&lt;/p>
&lt;p>为了方便理解,网络上找了一个组件架构图，简单说明各个组件位置：&lt;/p>
&lt;p>&lt;img src="/images/2021/terraform-about.png" alt="terraform架构图">&lt;/p>
&lt;p>对于terraform日常操作，我画了一个基本workflow流程图如下：
&lt;img src="/images/2021/terraform-workflow.png" alt="terraform操作流程图">&lt;/p>
&lt;h2 id="terraform关键字解释">terraform关键字解释：&lt;/h2>
&lt;h3 id="声明式语言hcl">声明式语言（HCL）：&lt;/h3>
&lt;p>Terraform是通过HashiCorp Configuration Language来编写代码的，HCL是声明式的，也就是说，程序员用HCL来描述整个基础架构应该是什么样的，然后把具体的实施工作交给Terraform就可以了，程序员不需要了解实施的具体步骤和细节，不需要了解terraform如何与云服务商的API进行对接。Terraform会根据代码，自动下载相应的Provider和Provisioner来负责具体步骤和细节。于声明式对应的是命令式。命令式语言是按照步骤执行的，先后顺序很重要，对固定输入执行命令式语言会得到固定的输出。声明式和命令式并无高下之分，只是在云资源编排这一领域，声明式会比较方便实现。我们日常见到的云资源编排工具都是声明式的，包括AWS CloudFormation、Azure Resource Template、Google Cloud Deoplyment Manager。大家如果通过调用腾讯云API来在腾讯云上实施资源编排，那通常就是命令式的。&lt;/p>
&lt;h3 id="资源状态文件state">资源状态文件(state)&lt;/h3>
&lt;p>Terraform初始化以后，会生成一个状态文件，该状态文件记录了最近一次操作的时间、各资源的相关属性、各变量的当前值、状态文件的版本、等等。&lt;/p>
&lt;p>下一次再操作的时候，terraform首先会把当前状态文件与云服务商上的状态进行一次更新，找出是否后有被删除或者更改了的资源，然后再根据.tf文件，决定那些资源需要删除、更新、创建。操作完成后，会重新生成一个状态文件。&lt;/p>
&lt;h3 id="terraform后台backend">Terraform后台(backend)&lt;/h3>
&lt;p>资源状态文件的完整性比较重要，对于这些文件我们至少需要做到在操作开始时自动加锁，直到操作结束，这样别人无法更改；另外还需要对资源版本变更进行跟踪；对资源文件里敏感信息进行访问控制。&lt;/p>
&lt;p>因此backend跟资源状态文件如何读取、存储、锁定，以及terraform apply如何执行严密相关。&lt;/p>
&lt;p>terraform缺省使用本地后台，也就是说，状态文件会存放在当前目录下，terraform代码的执行也在本地虚拟机运行。这对一个人管理的云资源是没有问题的，但当团队人员数目加多以后，大家可能都有自己的工作台，但是需要一个共有的地方来存储资源状态文件。这是后就可以用到远程存储。目前terraform支持多种远程存储后台，包括AWS s3,Hashicorp Consul,etcd，Terraform云，以及terraform企业版等等，这些远程后台都提供在远程存储、锁定状态文件。其中terraform企业版提供远程运行terraform，以及其他一些企业级特性。&lt;/p>
&lt;h3 id="terraform模块module">Terraform模块(module)&lt;/h3>
&lt;p>Terraform模块就是把一些高度可重用的代码写成模块，方便其他人使用。模块由输入参数、输出参数以及主逻辑组成。这就跟传统编程语言里的函数很像。Terraform提供了公开的模块注册器，模块编写完成以后，只要符合规范，就可以发布到模块注册器中让大家使用。https://registry.terraform.io/&lt;/p></description></item></channel></rss>