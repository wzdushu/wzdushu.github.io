<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>cicd on 丸子有记</title><link>/categories/cicd/</link><description>Recent content in cicd on 丸子有记</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>wzdushu@gmail.com (wanzi)</managingEditor><webMaster>wzdushu@gmail.com (wanzi)</webMaster><copyright>丸子有记</copyright><lastBuildDate>Thu, 17 Oct 2024 17:22:42 +0800</lastBuildDate><atom:link href="/categories/cicd/index.xml" rel="self" type="application/rss+xml"/><item><title>Github Actions automatically deploys hugo to Github Pages</title><link>/post/cicd-github-actions-hugo/</link><pubDate>Thu, 17 Oct 2024 17:22:42 +0800</pubDate><author>wzdushu@gmail.com (wanzi)</author><guid>/post/cicd-github-actions-hugo/</guid><description>Preface I recently planned to upgrade the theme of my blog. Since I was playing around with Github Actions, I planned to use it to implement CICD. After writing and submitting the article, the static files generated by hugo will be automatically deployed to Github pages, Netlify, Vercel, Cloud flare Pages and other third-party platforms. Today, I will record the automatic deployment process of Github pages, which will save a</description></item><item><title>Jenkins Agent integrates docker and kubectl tools</title><link>/post/cicd-jenkins-agent-docker-kubectl-helm/</link><pubDate>Wed, 22 Mar 2023 18:22:42 +0800</pubDate><author>wzdushu@gmail.com (wanzi)</author><guid>/post/cicd-jenkins-agent-docker-kubectl-helm/</guid><description>When we build Jenkins, the official jenkins-agent does not have the tools we use, such as helm, kubectl, curl, argocd, etc., so we need to integrate them. Note that the official image names have changed: jenkins/agent image, originally named jenkins/slave, renamed to jenkins/agent from 4.3-2 jenkins/inbound-agent image: originally named jenkins/jnlp-slave, renamed to jenkins/inbound-agent from 4.3-2 Dockerfile Copy 1 2 3 4 5 6 7 8 9 10 FROM jenkins/inbound-agent:4.11-1-alpine-jdk11 USER</description></item><item><title>Jenkins Workspace and Maven cache local persistent storage</title><link>/post/cicd-jenkins-localstorage-workspace-maven/</link><pubDate>Wed, 22 Mar 2023 16:22:42 +0800</pubDate><author>wzdushu@gmail.com (wanzi)</author><guid>/post/cicd-jenkins-localstorage-workspace-maven/</guid><description>Create local storage Since this is a test cluster, we can directly use local volume storage here; Since the user running in the jenkins server here is jenkins, and the uid of jenkins is 1000, we need to grant /opt/jenkins_agent/ and /opt/jenkins_maven/ permissions to jenkins in advance on node1 Copy 1 2 chown 1000.1000 -R /opt/jenkins_agent -R chown 1000.1000 -R /opt/jenkins_maven/ -R Local storage: agent-pv-pvc.yaml Copy 1 2 3 4</description></item><item><title>Deploy Jenkins in kubernetes environment</title><link>/post/cicd-jenkins-in-kubernetes/</link><pubDate>Thu, 16 Mar 2023 16:22:42 +0800</pubDate><author>wzdushu@gmail.com (wanzi)</author><guid>/post/cicd-jenkins-in-kubernetes/</guid><description>1. Install and deploy Jenkins 1. Manual installation Manual installation is very simple. Just prepare the yaml configuration in advance. The content of all CICD resources jenkins-install.yaml is as follows: Copy 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 apiVersion: v1 kind: PersistentVolume metadata: name: jenkins-pv spec: storageClassName: local</description></item><item><title>Getting Started with Argo Events</title><link>/post/cicd-argo-events-automate-task/</link><pubDate>Wed, 07 Jul 2021 16:22:42 +0800</pubDate><author>wzdushu@gmail.com (wanzi)</author><guid>/post/cicd-argo-events-automate-task/</guid><description>Earlier, we introduced how to install and trigger tasks in Argo Workflow. This article mainly introduces a new tool: What is ArgoEvents? Argo Events is an event-driven Kubernetes workflow automation framework. It supports more than 20 different events (such as webhooks, S3 drops, cronjobs, message queues - such as Kafka, GCP PubSub, SNS, SQS, etc.) Features: Supports events from 20+ event sources and more than 10 triggers. Ability to customize</description></item><item><title>Argo Workflow Practice - Installation and Deployment</title><link>/post/cicd-argo-workflow-install-in-k8s/</link><pubDate>Fri, 07 May 2021 16:22:42 +0800</pubDate><author>wzdushu@gmail.com (wanzi)</author><guid>/post/cicd-argo-workflow-install-in-k8s/</guid><description>Introduction &amp;amp; Architecture Argo Workflows is an open source container-level workflow engine for coordinating parallel jobs on Kubernetes. Argo Workflows implements the entire architecture functionality by abstracting Kubernetes CRDs (Custom Resource Definitions), such as Workflow Template, Workflow, and Cron Workflow. What can Argo workflow do? Define workflows, where each step in the workflow is a container. Model multi-step workflows as a series of tasks, or use directed acyclic graphs (DAGs)</description></item><item><title>Gitlab runner configure ceph s3</title><link>/post/cicd-gitlab-runner-ceph-s3/</link><pubDate>Fri, 26 Mar 2021 17:22:42 +0800</pubDate><author>wzdushu@gmail.com (wanzi)</author><guid>/post/cicd-gitlab-runner-ceph-s3/</guid><description>When building Npm for front-end projects, it often takes a long time to pull the front-end library. In addition, reuse between different jobs is also a problem. Whether it is artifacts or cache, we need to persist the reused files. Here we take cache as an example Note: The Gitlab runner here is deployed to the k8s cluster using the helm chart method, and the runner deployment is ignored; the</description></item><item><title>ArgoCD+Jenkins Pipeline Automated Application Deployment</title><link>/post/cicd-argocd-jenkins-pipeline/</link><pubDate>Wed, 29 Jul 2020 15:22:42 +0800</pubDate><author>wzdushu@gmail.com (wanzi)</author><guid>/post/cicd-argocd-jenkins-pipeline/</guid><description>Create helm repository First, create a basic Helm template repository: Copy 1 helm create template . For actual deployment, you need to customize your own helm template according to your business. I will directly use our internal custom universal template for quick deployment; you can also refer to the helm chart maintained by bitnami (https://github.com/bitnami/charts/tree/master/bitnami) Jenkins credential configuration argocd token information Configure Jenkins pipeline writing Here we take the gotest</description></item><item><title>Argocd deployment appears: no space left on device</title><link>/post/kubernetes-error-no-space-left-on-device/</link><pubDate>Mon, 18 May 2020 10:22:42 +0800</pubDate><author>wzdushu@gmail.com (wanzi)</author><guid>/post/kubernetes-error-no-space-left-on-device/</guid><description>Failure phenomenon In the morning, several business applications were deployed through argocd. After deploying 2, the third-party deployment failed. The same configuration, different knowledge clusters, how could such a problem occur? So I checked the log, as follows: Copy 1 2 3 Warning Failed 1m kubelet, 172.16.25.13 Error: Error response from daemon: error creating overlay mount to /var/lib/docker/overlay2/ba37165607862efb350093e5e287207e2547759fd81dc4e5e356a86ac5e28324-init/merged: no space left on device Warning Failed 1m kubelet, 172.16.25.13 Error: Error</description></item><item><title>ArgoCD adds multi-cluster</title><link>/post/cicd-argocd-add-clusters/</link><pubDate>Tue, 05 May 2020 15:22:42 +0800</pubDate><author>wzdushu@gmail.com (wanzi)</author><guid>/post/cicd-argocd-add-clusters/</guid><description>Generate argocd management user token Log in to the dashboard, settings&amp;ndash;&amp;gt;Accounts&amp;ndash;&amp;gt;admin&amp;ndash;&amp;gt;Generate New After generating, please record the token information, similar to the following: Copy 1 fyJhbGciOiJ3UzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiI2OWI0M2M0Mi01MmZiLTRlZmItODIxOC0yOWU3NGM5MWI0NDIiLCJpYXQiOjE1OTUzMTEx3zQsImlzcyI6ImFyZ29jZCIsIm5iZiI6MTU5NTMxMTE3NCwic3ViIjoib3duZXIifQ.9u4XzArEeaz7G2Q2TWusnTkakEmq9BYDAUHr3dC6wG5 Configure argocd config For argocd with https authentication enabled, it is useless when adding a cluster. You need to log in to the server-side POD for configuration, as follows: Copy 1 2 3 4 5 6 7 8 9 10 11 12 13 #</description></item><item><title>ArgoCD installation and deployment</title><link>/post/cicd-argocd-install-in-k8s/</link><pubDate>Fri, 01 May 2020 15:22:42 +0800</pubDate><author>wzdushu@gmail.com (wanzi)</author><guid>/post/cicd-argocd-install-in-k8s/</guid><description>Installation and deployment ArgoCD is very easy to deploy. Install the official deployment method (HA mode: Copy 1 2 kubectl create namespace argocd kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/v1.5.2/manifests/ha/install.yaml You can adjust the deployment file as needed. After the pod is successfully started Copy 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # kubectl -n</description></item><item><title>Deploy gitlab-runner based on K8S</title><link>/post/cicd-gitlab-k8s-gitlabrunner/</link><pubDate>Thu, 14 Nov 2019 17:22:42 +0800</pubDate><author>wzdushu@gmail.com (wanzi)</author><guid>/post/cicd-gitlab-k8s-gitlabrunner/</guid><description>Deploy gitlab-runner Here is based on helm deployment, reference: https://gitlab.com/gitlab-org/charts/gitlab-runner.git Copy 1 helm install --namespace gitlab-managed-apps --name k8s-gitlab-runner -f values.yaml Note: the values.yaml file needs to be set to privileged: true Build a basic image (docker in docker) Dockerfile file content: Copy 1 2 3 4 5 6 7 FROM docker:19.03.1-dind WORKDIR /opt RUN echo &amp;#34;nameserver 114.114.114.114&amp;#34; &amp;gt;&amp;gt; /etc/resolv.conf RUN sed -i &amp;#39;s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g&amp;#39; /etc/apk/repositories RUN apk update RUN apk upgrade</description></item><item><title>Building Jenkins based on Docker-compose</title><link>/post/cicd-jenkins-install/</link><pubDate>Mon, 11 Nov 2019 16:22:42 +0800</pubDate><author>wzdushu@gmail.com (wanzi)</author><guid>/post/cicd-jenkins-install/</guid><description>docker-compose configuration Copy 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 version: &amp;#39;2&amp;#39; services: jenkins: image: jenkins/jenkins:latest restart: always environment: JAVA_OPTS: &amp;#34;-Dorg.apache.commons.jelly.tags.fmt.timeZone=Asia/Shanghai -Djava.awt.headless=true -Dmail.smtp.starttls.enable=true&amp;#34; ports: - &amp;#34;80:8080&amp;#34; - &amp;#34;50000:50000&amp;#34; volumes: - &amp;#39;/ssd/jenkins:/var/jenkins_home&amp;#39; - &amp;#39;/var/run/docker.sock:/var/run/docker.sock&amp;#39; - &amp;#39;/etc/localtime:/etc/localtime:ro&amp;#39; dns: 223.5.5.5 networks: - extnetwork networks: extnetwork: ipam: config: - subnet: 172.255.0.0/16 Start the service Copy 1 docker-compose up</description></item></channel></rss>