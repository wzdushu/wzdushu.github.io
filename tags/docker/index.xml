<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>docker on 丸子有记</title><link>/tags/docker/</link><description>Recent content in docker on 丸子有记</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>wzdushu@gmail.com (wanzi)</managingEditor><webMaster>wzdushu@gmail.com (wanzi)</webMaster><copyright>丸子有记</copyright><lastBuildDate>Thu, 13 Apr 2023 18:22:42 +0800</lastBuildDate><atom:link href="/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>Kind builds a lightweight kubernetes cluster</title><link>/post/kubernetes-kind-build-clusters/</link><pubDate>Thu, 13 Apr 2023 18:22:42 +0800</pubDate><author>wzdushu@gmail.com (wanzi)</author><guid>/post/kubernetes-kind-build-clusters/</guid><description>I was reviewing Golang recently and wrote a web application. After running it locally, I wanted to test it in a k8s cluster. Due to the machine configuration, it was still a bit difficult to build a complete k8s cluster. I remember that a friend said that k8s can also be run in docker, so I tried it. Today&amp;rsquo;s protagonist is kind, so what is kind? What can kind be</description></item><item><title>Jenkins Agent integrates docker and kubectl tools</title><link>/post/cicd-jenkins-agent-docker-kubectl-helm/</link><pubDate>Wed, 22 Mar 2023 18:22:42 +0800</pubDate><author>wzdushu@gmail.com (wanzi)</author><guid>/post/cicd-jenkins-agent-docker-kubectl-helm/</guid><description>When we build Jenkins, the official jenkins-agent does not have the tools we use, such as helm, kubectl, curl, argocd, etc., so we need to integrate them. Note that the official image names have changed: jenkins/agent image, originally named jenkins/slave, renamed to jenkins/agent from 4.3-2 jenkins/inbound-agent image: originally named jenkins/jnlp-slave, renamed to jenkins/inbound-agent from 4.3-2 Dockerfile Copy 1 2 3 4 5 6 7 8 9 10 FROM jenkins/inbound-agent:4.11-1-alpine-jdk11 USER</description></item><item><title>Dockerfile多阶段构建</title><link>/post/docker-dockerfile-multi-stage/</link><pubDate>Mon, 02 Jul 2018 16:22:42 +0800</pubDate><author>wzdushu@gmail.com (wanzi)</author><guid>/post/docker-dockerfile-multi-stage/</guid><description>Docker多阶段构建理解: 构建镜像需要有一个基础镜像,后续操作就会基于该基础镜像构建 docker镜像文件里有层级概念,每执行一次RUN指令</description></item><item><title>Dockerfile语法详情</title><link>/post/docker-dockerfile-details/</link><pubDate>Thu, 21 Jun 2018 16:22:42 +0800</pubDate><author>wzdushu@gmail.com (wanzi)</author><guid>/post/docker-dockerfile-details/</guid><description>FROM 指定构建镜像使用的基础镜像,FROM必须是Dockerfile中非注释行的第一个指令,如果本地没有指定的镜像，则会自动从Docker的公共</description></item><item><title>Docker基础命令</title><link>/post/docker-commands-base/</link><pubDate>Wed, 20 Jun 2018 16:22:42 +0800</pubDate><author>wzdushu@gmail.com (wanzi)</author><guid>/post/docker-commands-base/</guid><description>常用命令 Copy 1 2 3 4 5 6 7 8 docker info #查看本地docker信息 docker search openresty #搜索远程镜像仓库 docker images #查看当前系统镜像仓库镜像 docker ps #查看当前正在运行容器 docker pull</description></item></channel></rss>